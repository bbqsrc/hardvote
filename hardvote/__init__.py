import uuid
import csv
import json
import logging
import re
import os
import os.path

from dateutil.parser import parse as parsedate
from datetime import datetime
from lxml import etree
from lxml.etree import Element, SubElement


XMLNS = {
	'poll': "http://bbqsrc.net/xml/poll/0.1",
	'users': "http://bbqsrc.net/xml/poll/users/0.1"
}

NS = {}
for k, v in XMLNS.items():
	NS[k] = "{%s}" % v

from hardvote.web import HTMLGenerator

def get_users_xml_from_csv(csvf):
	"""
	CSV Format:
		first-name,last-name,email

	UUIDs are autogenerated for each user.

	You should probably regenerate the XML for each poll.
	"""

	ns = NS['users']
	root = Element(ns + "users",
			nsmap={None: XMLNS['users']})

	reader = csv.reader(open(csvf))
	for row in reader:
		#print(row[0])
		user = SubElement(root, ns + "user")
		SubElement(user, ns + "uuid").text = uuid.uuid4().hex
		SubElement(user, ns + "first-name").text = row[0]
		SubElement(user, ns + "last-name").text = row[1]
		SubElement(user, ns + "email").text = row[2]

	return root


class Poll(object):
	def __init__(self, xmlf):
		# XXX code must save out XML and check if it can be loaded
		ns = NS['poll']
		self.xml = etree.parse(xmlf)

		def get_settings(self, node):
			if node.find(ns + "title") is not None:
				self.title = node.find(ns + "title").text
			else:
				raise AttributeError("No title!")

			if node.find(ns + "id") is not None:
				self.id = node.find(ns + "id").text
			else:
				raise AttributeError("No id!")

			if node.find(ns + "opening-date") is not None:
				self.opening = parsedate(node.find(ns + "opening-date").text)
			else:
				self.opening = None

			if node.find(ns + "closing-date") is not None:
				self.closing = parsedate(node.find(ns + "closing-date").text)
			else:
				self.closing = None

			if node.find(ns + "template-file") is not None:
				self.template = node.find(ns + "template-file").text
			else:
				raise AttributeError("No template file!")
			
			if node.find(ns + "user-file") is not None:
				fn = "%s.users.xml" % self.id
				if os.path.exists(fn):
					self.users = etree.parse(fn)
				else:
					self.users = get_users_xml_from_csv(node.find(ns + "user-file").text)
			else:
				raise AttributeError("No users file!")

			#print(etree.tostring(self.users).decode())

		def get_content(self, node):
			self.html = HTMLGenerator(self.template, node).get_page()
		
		get_settings(self, self.xml.find(ns + "settings"))	
		get_content(self, self.xml.find(ns + "content"))
	
	def is_open(self):
		return self.closing == None or (datetime.now() > self.opening and \
				datetime.now() < self.closing)

	def has_user(self, uuid_hex):
		print(uuid_hex)
		res = self.users.xpath("/a:users/a:user/a:uuid[.='%s']" % uuid_hex, 
			namespaces={'a': XMLNS['users']})
		print(res)
		#return True
		# XXX: works but stubbed for testing
		return len(res) > 0
